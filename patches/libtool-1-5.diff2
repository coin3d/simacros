The MKS sh implementation has a bug in the "case" implementation it
seems.  Without running true before certain case statements, the
case-statements won't be executed.  Running ":" does not seem to
work as an alternative, so it seems it is not just the return-value
of the last command that affects this - the shell must apparently
fork out the command to clean up so the case will run correctly.

Strangely enough, the case bug also seems to be affected with whether
the arguments contain "/"-characters - or it could just be that the
bug triggers on some condition set up on the previous loop over the
argument list...

  Lars J

--- ltmain.in.orig	Fri Jun 13 11:59:42 2003
+++ ltmain.in	Wed Jun 18 12:19:39 2003
@@ -212,6 +212,7 @@
   fi
 
   # Have we seen a non-optional argument yet?
+  true # MKS weirdness
   case $arg in
   --help)
     show_help=yes
@@ -389,6 +390,7 @@
 	;;
 
       normal )
+	true # MKS weirdness
 	# Accept any command-line options.
 	case $arg in
 	-o)
@@ -531,6 +531,7 @@
 	  if grep "^# ### BEGIN LIBTOOL TAG CONFIG: $z$" < "$0" > /dev/null; then
 	    # Evaluate the configuration.
 	    eval "`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $0`"
+	    true # MKS weirdness
 	    case "$base_compile " in
 	    "$CC "* | " $CC "* | "`$echo $CC` "* | " `$echo $CC` "*)
 	      # The compiler in the base compile command matches
@@ -1635,6 +1636,7 @@
 	  if grep "^# ### BEGIN LIBTOOL TAG CONFIG: $z$" < "$0" > /dev/null; then
 	    # Evaluate the configuration.
 	    eval "`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $0`"
+	    true # MKS weirdness
 	    case $base_compile in
 	    "$CC "* | " $CC "* | "`$echo $CC` "* | " `$echo $CC` "*)
 	      # The compiler in $compile_command matches
